import Shake from 'shake.js';
import html2canvas from 'html2canvas';

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */


function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function styleInject(css, ref) {
  if ( ref === void 0 ) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') { return; }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css_248z = ".styles-module_body__WHwb- {\r\n  height: 100%;\r\n  margin: 0;\r\n  overflow-x: hidden;\r\n}\r\n\r\n.styles-module_root__qdY0g {\r\n  transition: opacity 0.3s ease, bottom 0.3s ease;\r\n  overflow-x: hidden;\r\n  overflow-y: auto;\r\n  transform-origin: bottom;\r\n  opacity: 0;\r\n  position: fixed;\r\n  width: 100vw;\r\n  height: 100%;\r\n  bottom: -100%;\r\n  left: 0;\r\n  box-shadow: 1px 2px 8px #424243;\r\n  box-sizing: border-box;\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: white;\r\n}\r\n.styles-module_show__bHkIq {\r\n  opacity: 1;\r\n  bottom: 0;\r\n  top: 0;\r\n}\r\n\r\n.styles-module_header__r4ewU {\r\n  min-height: 55px;\r\n  position: sticky;\r\n  top: 0;\r\n  box-shadow: 0px 0px 8px #8a8a8a;\r\n  background-color: white;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 0 16px;\r\n  font-size: 20px;\r\n}\r\n.styles-module_settings-btn__2zd9M {\r\n  font-size: 25px;\r\n  cursor: pointer;\r\n}\r\n.styles-module_close-btn__2kuzd {\r\n  cursor: pointer;\r\n}\r\n\r\n.styles-module_main__LXFK2 {\r\n  padding: 0 16px;\r\n}\r\n\r\n.styles-module_screenshot__qPo8y {\r\n  display: block;\r\n  flex: 1;\r\n  margin: 10px auto;\r\n  max-width: 100%;\r\n  border: 1px dashed lightgray;\r\n}\r\n\r\n.styles-module_input__fwhX5 {\r\n  width: 100%;\r\n  outline: none;\r\n  border-radius: 5px;\r\n  font-size: 14px;\r\n  margin-top: 20px;\r\n  border: 1px solid lightgray;\r\n  padding: 5px 10px;\r\n  box-sizing: border-box;\r\n}\r\n.styles-module_title-input__RWCWu {\r\n  height: 40px;\r\n}\r\n.styles-module_description-input__W4-7n {\r\n  resize: none;\r\n  font-family: inherit;\r\n  min-height: 200px;\r\n}\r\n\r\n.styles-module_footer__EZJz4 {\r\n  padding: 16px;\r\n}\r\n.styles-module_submit-btn__bvwFf {\r\n  width: 100%;\r\n  height: 50px;\r\n  outline: 0;\r\n  border: none;\r\n  color: white;\r\n  background-color: lightskyblue;\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n}\r\n\r\n.styles-module_input-error__aSFp- {\r\n  border: 1px solid red;\r\n}\r\n.styles-module_error-msg__wjbK6 {\r\n  color: red;\r\n  font-size: 12px;\r\n}\r\n";
var styles = {"body":"styles-module_body__WHwb-","root":"styles-module_root__qdY0g","show":"styles-module_show__bHkIq","header":"styles-module_header__r4ewU","settings-btn":"styles-module_settings-btn__2zd9M","close-btn":"styles-module_close-btn__2kuzd","main":"styles-module_main__LXFK2","screenshot":"styles-module_screenshot__qPo8y","input":"styles-module_input__fwhX5","title-input":"styles-module_title-input__RWCWu","description-input":"styles-module_description-input__W4-7n","footer":"styles-module_footer__EZJz4","submit-btn":"styles-module_submit-btn__bvwFf","input-error":"styles-module_input-error__aSFp-","error-msg":"styles-module_error-msg__wjbK6"};
styleInject(css_248z);

class ReportModal {
    constructor({ reporter }) {
        Object.defineProperty(this, "root", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: null
        });
        Object.defineProperty(this, "_isVisible", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "reporter", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.reporter = reporter;
    }
    get isVisible() {
        return this._isVisible;
    }
    // this is for mobile. handle desktop
    mount() {
        this.root = document.createElement("div");
        this.root.classList.add(styles.root, styles.show);
        // header
        const header = document.createElement("header");
        header.classList.add(styles.header);
        this.root.appendChild(header);
        // main
        const main = document.createElement("main");
        main.classList.add(styles.main);
        this.root.appendChild(main);
        // footer
        const footer = document.createElement("footer");
        footer.classList.add(styles.footer);
        this.root.appendChild(footer);
        this.renderMainView();
        document.body.append(this.root);
    }
    renderMainView() {
        const header = this.root.querySelector("header");
        const main = this.root.querySelector("main");
        const footer = this.root.querySelector("footer");
        header.innerHTML = "";
        main.innerHTML = "";
        footer.innerHTML = "";
        // settings button
        const settingsButton = document.createElement("span");
        settingsButton.innerHTML = "&#9881;";
        settingsButton.onclick = () => this.renderSettingsView();
        settingsButton.classList.add(styles["settings-btn"]);
        header.appendChild(settingsButton);
        // close button
        const closeButton = document.createElement("span");
        closeButton.innerHTML = "&#10006;";
        closeButton.onclick = () => this.hide();
        closeButton.classList.add(styles["close-btn"]);
        header.appendChild(closeButton);
        // canvas container
        const screenshotContainer = document.createElement("div");
        screenshotContainer.classList.add("screenshot-container");
        main.appendChild(screenshotContainer);
        // divider
        const divider = document.createElement("hr");
        divider.style.width = "100%";
        main.appendChild(divider);
        // title
        const title = document.createElement("input");
        title.placeholder = "Title";
        title.classList.add(styles.input, styles["title-input"], "title-input");
        main.appendChild(title);
        // description
        const description = document.createElement("textarea");
        description.placeholder = "Description";
        description.classList.add(styles.input, styles["description-input"], "description-input");
        main.appendChild(description);
        // submit button
        const button = document.createElement("button");
        button.classList.add(styles["submit-btn"], "submit-btn");
        button.innerText = "SUBMIT";
        button.onclick = () => this.submitReport();
        footer.appendChild(button);
    }
    renderSettingsView() {
        const main = this.root.querySelector("main");
        main.innerHTML = "";
    }
    setLoading(loading) {
        const footer = this.root.querySelector("footer");
        const submitBtn = footer.querySelector(".submit-btn");
        submitBtn.innerText = loading ? "LOADING..." : "SUBMIT";
    }
    dispose() {
        var _a;
        (_a = this.root) === null || _a === void 0 ? void 0 : _a.remove();
    }
    show() {
        var _a;
        this._isVisible = true;
        document.body.classList.add(styles.body);
        (_a = this.root) === null || _a === void 0 ? void 0 : _a.classList.add(styles.show);
    }
    hide() {
        var _a;
        this._isVisible = false;
        document.body.classList.remove(styles.body);
        (_a = this.root) === null || _a === void 0 ? void 0 : _a.classList.remove(styles.show);
    }
    addScreenshot(canvas) {
        const container = this.root.querySelector(".screenshot-container");
        container.innerHTML = "";
        const ratio = canvas.width / canvas.height;
        let width = 300;
        let height = 300 / ratio;
        if (height > 400) {
            height = 400;
            width = 400 * ratio;
        }
        canvas.style.width = width + "px";
        canvas.style.height = height + "px";
        canvas.classList.add(styles.screenshot);
        container.appendChild(canvas);
    }
    getScreenshot() {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                this.root.querySelector(".screenshot-container canvas").toBlob((blob) => {
                    if (!blob)
                        reject("something went wrong when creating the screenshot!");
                    const file = new File([blob], `screenshot-${Date.now()}.png`, {
                        type: "image/png",
                    });
                    resolve(file);
                }, "image/png");
            });
        });
    }
    getFormData() {
        return __awaiter(this, void 0, void 0, function* () {
            const root = this.root;
            const screenshot = yield this.getScreenshot();
            const title = root.querySelector(".title-input").value.trim();
            const description = root.querySelector(".description-input").value.trim();
            return {
                screenshot,
                title,
                description,
            };
        });
    }
    validate(data) {
        const title = this.root.querySelector(".title-input");
        const description = this.root.querySelector(".description-input");
        [title, description].forEach((i) => i.classList.remove(styles["input-error"]));
        this.root.querySelectorAll(".error-msg").forEach((i) => i.remove());
        if (!data.title) {
            title.classList.add(styles["input-error"]);
            const error = document.createElement("span");
            error.classList.add(styles["error-msg"], "error-msg");
            error.innerText = "Required Field!";
            title.after(error);
            return false;
        }
        if (!data.description) {
            description.classList.add(styles["input-error"]);
            const error = document.createElement("span");
            error.classList.add(styles["error-msg"], "error-msg");
            error.innerText = "Required Field!";
            description.after(error);
            return false;
        }
        return true;
    }
    submitReport() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const data = yield this.getFormData();
                if (!this.validate(data))
                    return;
                this.setLoading(true);
                yield this.reporter().report(data);
            }
            catch (e) {
                console.error(e);
                // toast
                alert("something went wrong" + e.message || "");
            }
            finally {
                this.setLoading(false);
            }
        });
    }
}

class JiraReporter {
    constructor(config) {
        Object.defineProperty(this, "config", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: config
        });
        Object.defineProperty(this, "Authorization", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ""
        });
        this.Authorization = `Basic ${window.btoa(`${this.config.credentials.user_email}:${this.config.credentials.api_token}`)}`;
    }
    report(body) {
        return __awaiter(this, void 0, void 0, function* () {
            // API_TOKEN
            // ATATT3xFfGF0H-NLfIat08EMlMRH3BlluweKEU6fmzIDRjE4eg_4f01hODZdhreZjN0InP3mJceVYbVT5LxPQmo6QrCSAMgJsr2CnlHRbWs237rp2tQPCNQ0PWwV9MR9SGsV5_cA8a0d5yXIyuDF2Xa6fKivxYwZO7C8oe82laZy_0-D7D5Gxcg=76094D96
            const issue = yield this.createIssue({
                fields: Object.assign({ summary: body.title, description: {
                        type: "doc",
                        version: 1,
                        content: [
                            {
                                type: "paragraph",
                                content: [
                                    {
                                        type: "text",
                                        text: body.description,
                                    },
                                ],
                            },
                        ],
                    } }, this.config.meta),
            });
            yield this.attachScreenshot(issue.id, body.screenshot);
        });
    }
    fetch(input, init) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                const xhttp = new XMLHttpRequest();
                xhttp.onload = function () {
                    const response = new Response(this.responseText);
                    resolve(response);
                };
                xhttp.onerror = function (e) {
                    reject(e);
                };
                xhttp.open(init.method, input);
                Object.entries(init.headers || {}).forEach(([key, value]) => {
                    xhttp.setRequestHeader(key, value);
                });
                xhttp.send(init.body);
            });
        });
    }
    createIssue(body) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = new URL("/rest/api/3/issue", this.config.url);
            const response = yield this.fetch(url, {
                method: "POST",
                headers: {
                    Authorization: this.Authorization,
                    Accept: "application/json",
                    "Content-Type": "application/json",
                    "X-Atlassian-Token": "no-check",
                },
                body: JSON.stringify(body),
            });
            return yield response.json();
        });
    }
    attachScreenshot(issueId, screenshot) {
        return __awaiter(this, void 0, void 0, function* () {
            const form = new FormData();
            form.append("file", screenshot);
            const url = new URL(`/rest/api/3/issue/${issueId}/attachments`, this.config.url);
            const res = yield fetch(url, {
                method: "POST",
                body: form,
                headers: {
                    Authorization: this.Authorization,
                    Accept: "application/json",
                    "X-Atlassian-Token": "no-check",
                },
            });
            return yield res.json();
        });
    }
}

class WebShakeReport {
    constructor(config) {
        Object.defineProperty(this, "config", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: config
        });
        Object.defineProperty(this, "shake", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new Shake({
                threshhold: 0.1,
            })
        });
        Object.defineProperty(this, "modal", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new ReportModal({
                reporter: () => this.config.reporter,
            })
        });
        Object.defineProperty(this, "initialized", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        this.handleShake = this.handleShake.bind(this);
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.initialized) {
                console.log("web shake report initialized");
                this.shake.start();
                window.addEventListener("shake", this.handleShake, false);
                this.modal.mount();
                this.initialized = true;
                const screenshot = yield this.takeScreenshot();
                this.modal.addScreenshot(screenshot);
            }
        });
    }
    dispose() {
        if (this.initialized) {
            window.removeEventListener("shake", this.handleShake, false);
            this.modal.dispose();
        }
    }
    takeScreenshot() {
        return __awaiter(this, void 0, void 0, function* () {
            const canvas = yield html2canvas(document.body);
            return canvas;
        });
    }
    handleShake() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.modal.isVisible) {
                const screenshot = yield this.takeScreenshot();
                this.modal.addScreenshot(screenshot);
                this.modal.show();
            }
        });
    }
}

export { JiraReporter, WebShakeReport };
